// Code generated by protoc-gen-go. DO NOT EDIT.
// source: greet.proto

/*
Package greetpb is a generated protocol buffer package.

It is generated from these files:
	greet.proto

It has these top-level messages:
	Greeting
	GreetRequest
	GreetResponse
	GreetManyTimesRequest
	GreetManyTimesResponse
	LongGreetRequest
	LongGreetResponse
	GreetEveryoneRequest
	GreetEveryoneResponse
	GreetWithDeadlineRequest
	GreetWithDeadlineResponse
	GreetWithErrorHandlingRequest
	GreetWithErrorHandlingResponse
*/
package greetpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Greeting struct {
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
}

func (m *Greeting) Reset()                    { *m = Greeting{} }
func (m *Greeting) String() string            { return proto.CompactTextString(m) }
func (*Greeting) ProtoMessage()               {}
func (*Greeting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Greeting) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Greeting) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type GreetRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *GreetRequest) Reset()                    { *m = GreetRequest{} }
func (m *GreetRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetRequest) ProtoMessage()               {}
func (*GreetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GreetRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type GreetResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetResponse) Reset()                    { *m = GreetResponse{} }
func (m *GreetResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetResponse) ProtoMessage()               {}
func (*GreetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GreetResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type GreetManyTimesRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *GreetManyTimesRequest) Reset()                    { *m = GreetManyTimesRequest{} }
func (m *GreetManyTimesRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetManyTimesRequest) ProtoMessage()               {}
func (*GreetManyTimesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GreetManyTimesRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type GreetManyTimesResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetManyTimesResponse) Reset()                    { *m = GreetManyTimesResponse{} }
func (m *GreetManyTimesResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetManyTimesResponse) ProtoMessage()               {}
func (*GreetManyTimesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GreetManyTimesResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type LongGreetRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *LongGreetRequest) Reset()                    { *m = LongGreetRequest{} }
func (m *LongGreetRequest) String() string            { return proto.CompactTextString(m) }
func (*LongGreetRequest) ProtoMessage()               {}
func (*LongGreetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LongGreetRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type LongGreetResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *LongGreetResponse) Reset()                    { *m = LongGreetResponse{} }
func (m *LongGreetResponse) String() string            { return proto.CompactTextString(m) }
func (*LongGreetResponse) ProtoMessage()               {}
func (*LongGreetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LongGreetResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type GreetEveryoneRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *GreetEveryoneRequest) Reset()                    { *m = GreetEveryoneRequest{} }
func (m *GreetEveryoneRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetEveryoneRequest) ProtoMessage()               {}
func (*GreetEveryoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GreetEveryoneRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type GreetEveryoneResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetEveryoneResponse) Reset()                    { *m = GreetEveryoneResponse{} }
func (m *GreetEveryoneResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetEveryoneResponse) ProtoMessage()               {}
func (*GreetEveryoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GreetEveryoneResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type GreetWithDeadlineRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *GreetWithDeadlineRequest) Reset()                    { *m = GreetWithDeadlineRequest{} }
func (m *GreetWithDeadlineRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetWithDeadlineRequest) ProtoMessage()               {}
func (*GreetWithDeadlineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GreetWithDeadlineRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type GreetWithDeadlineResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetWithDeadlineResponse) Reset()                    { *m = GreetWithDeadlineResponse{} }
func (m *GreetWithDeadlineResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetWithDeadlineResponse) ProtoMessage()               {}
func (*GreetWithDeadlineResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GreetWithDeadlineResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type GreetWithErrorHandlingRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *GreetWithErrorHandlingRequest) Reset()                    { *m = GreetWithErrorHandlingRequest{} }
func (m *GreetWithErrorHandlingRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetWithErrorHandlingRequest) ProtoMessage()               {}
func (*GreetWithErrorHandlingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GreetWithErrorHandlingRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type GreetWithErrorHandlingResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetWithErrorHandlingResponse) Reset()                    { *m = GreetWithErrorHandlingResponse{} }
func (m *GreetWithErrorHandlingResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetWithErrorHandlingResponse) ProtoMessage()               {}
func (*GreetWithErrorHandlingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GreetWithErrorHandlingResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*Greeting)(nil), "greet.Greeting")
	proto.RegisterType((*GreetRequest)(nil), "greet.GreetRequest")
	proto.RegisterType((*GreetResponse)(nil), "greet.GreetResponse")
	proto.RegisterType((*GreetManyTimesRequest)(nil), "greet.GreetManyTimesRequest")
	proto.RegisterType((*GreetManyTimesResponse)(nil), "greet.GreetManyTimesResponse")
	proto.RegisterType((*LongGreetRequest)(nil), "greet.LongGreetRequest")
	proto.RegisterType((*LongGreetResponse)(nil), "greet.LongGreetResponse")
	proto.RegisterType((*GreetEveryoneRequest)(nil), "greet.GreetEveryoneRequest")
	proto.RegisterType((*GreetEveryoneResponse)(nil), "greet.GreetEveryoneResponse")
	proto.RegisterType((*GreetWithDeadlineRequest)(nil), "greet.GreetWithDeadlineRequest")
	proto.RegisterType((*GreetWithDeadlineResponse)(nil), "greet.GreetWithDeadlineResponse")
	proto.RegisterType((*GreetWithErrorHandlingRequest)(nil), "greet.GreetWithErrorHandlingRequest")
	proto.RegisterType((*GreetWithErrorHandlingResponse)(nil), "greet.GreetWithErrorHandlingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GreetService service

type GreetServiceClient interface {
	// Unary Call
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	// Server Streaming Call
	GreetManyTimes(ctx context.Context, in *GreetManyTimesRequest, opts ...grpc.CallOption) (GreetService_GreetManyTimesClient, error)
	// Client Streaming Call
	LonGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_LonGreetClient, error)
	// Bi-rectional Streaming Call
	GreetEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetEveryoneClient, error)
	// Deadline
	// Seting client deadline (timeout)
	GreetWithDeadline(ctx context.Context, in *GreetWithDeadlineRequest, opts ...grpc.CallOption) (*GreetWithDeadlineResponse, error)
	// error handling
	// This RPC throw an exception if the first_name or last_name is empty
	// The error being sent is of type INAVLID_ARGUMENT
	GreetWithErrorHandling(ctx context.Context, in *GreetWithErrorHandlingRequest, opts ...grpc.CallOption) (*GreetWithErrorHandlingResponse, error)
}

type greetServiceClient struct {
	cc *grpc.ClientConn
}

func NewGreetServiceClient(cc *grpc.ClientConn) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := grpc.Invoke(ctx, "/greet.GreetService/Greet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GreetManyTimes(ctx context.Context, in *GreetManyTimesRequest, opts ...grpc.CallOption) (GreetService_GreetManyTimesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetService_serviceDesc.Streams[0], c.cc, "/greet.GreetService/GreetManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_GreetManyTimesClient interface {
	Recv() (*GreetManyTimesResponse, error)
	grpc.ClientStream
}

type greetServiceGreetManyTimesClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetManyTimesClient) Recv() (*GreetManyTimesResponse, error) {
	m := new(GreetManyTimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) LonGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_LonGreetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetService_serviceDesc.Streams[1], c.cc, "/greet.GreetService/LonGreet", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceLonGreetClient{stream}
	return x, nil
}

type GreetService_LonGreetClient interface {
	Send(*LongGreetRequest) error
	CloseAndRecv() (*LongGreetResponse, error)
	grpc.ClientStream
}

type greetServiceLonGreetClient struct {
	grpc.ClientStream
}

func (x *greetServiceLonGreetClient) Send(m *LongGreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceLonGreetClient) CloseAndRecv() (*LongGreetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LongGreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetEveryoneClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetService_serviceDesc.Streams[2], c.cc, "/greet.GreetService/GreetEveryone", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetEveryoneClient{stream}
	return x, nil
}

type GreetService_GreetEveryoneClient interface {
	Send(*GreetEveryoneRequest) error
	Recv() (*GreetEveryoneResponse, error)
	grpc.ClientStream
}

type greetServiceGreetEveryoneClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetEveryoneClient) Send(m *GreetEveryoneRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGreetEveryoneClient) Recv() (*GreetEveryoneResponse, error) {
	m := new(GreetEveryoneResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetWithDeadline(ctx context.Context, in *GreetWithDeadlineRequest, opts ...grpc.CallOption) (*GreetWithDeadlineResponse, error) {
	out := new(GreetWithDeadlineResponse)
	err := grpc.Invoke(ctx, "/greet.GreetService/GreetWithDeadline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GreetWithErrorHandling(ctx context.Context, in *GreetWithErrorHandlingRequest, opts ...grpc.CallOption) (*GreetWithErrorHandlingResponse, error) {
	out := new(GreetWithErrorHandlingResponse)
	err := grpc.Invoke(ctx, "/greet.GreetService/GreetWithErrorHandling", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GreetService service

type GreetServiceServer interface {
	// Unary Call
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	// Server Streaming Call
	GreetManyTimes(*GreetManyTimesRequest, GreetService_GreetManyTimesServer) error
	// Client Streaming Call
	LonGreet(GreetService_LonGreetServer) error
	// Bi-rectional Streaming Call
	GreetEveryone(GreetService_GreetEveryoneServer) error
	// Deadline
	// Seting client deadline (timeout)
	GreetWithDeadline(context.Context, *GreetWithDeadlineRequest) (*GreetWithDeadlineResponse, error)
	// error handling
	// This RPC throw an exception if the first_name or last_name is empty
	// The error being sent is of type INAVLID_ARGUMENT
	GreetWithErrorHandling(context.Context, *GreetWithErrorHandlingRequest) (*GreetWithErrorHandlingResponse, error)
}

func RegisterGreetServiceServer(s *grpc.Server, srv GreetServiceServer) {
	s.RegisterService(&_GreetService_serviceDesc, srv)
}

func _GreetService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GreetManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetManyTimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).GreetManyTimes(m, &greetServiceGreetManyTimesServer{stream})
}

type GreetService_GreetManyTimesServer interface {
	Send(*GreetManyTimesResponse) error
	grpc.ServerStream
}

type greetServiceGreetManyTimesServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetManyTimesServer) Send(m *GreetManyTimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_LonGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).LonGreet(&greetServiceLonGreetServer{stream})
}

type GreetService_LonGreetServer interface {
	SendAndClose(*LongGreetResponse) error
	Recv() (*LongGreetRequest, error)
	grpc.ServerStream
}

type greetServiceLonGreetServer struct {
	grpc.ServerStream
}

func (x *greetServiceLonGreetServer) SendAndClose(m *LongGreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceLonGreetServer) Recv() (*LongGreetRequest, error) {
	m := new(LongGreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GreetEveryone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GreetEveryone(&greetServiceGreetEveryoneServer{stream})
}

type GreetService_GreetEveryoneServer interface {
	Send(*GreetEveryoneResponse) error
	Recv() (*GreetEveryoneRequest, error)
	grpc.ServerStream
}

type greetServiceGreetEveryoneServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetEveryoneServer) Send(m *GreetEveryoneResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGreetEveryoneServer) Recv() (*GreetEveryoneRequest, error) {
	m := new(GreetEveryoneRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GreetWithDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetWithDeadlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).GreetWithDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/GreetWithDeadline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).GreetWithDeadline(ctx, req.(*GreetWithDeadlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GreetWithErrorHandling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetWithErrorHandlingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).GreetWithErrorHandling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/GreetWithErrorHandling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).GreetWithErrorHandling(ctx, req.(*GreetWithErrorHandlingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GreetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreetService_Greet_Handler,
		},
		{
			MethodName: "GreetWithDeadline",
			Handler:    _GreetService_GreetWithDeadline_Handler,
		},
		{
			MethodName: "GreetWithErrorHandling",
			Handler:    _GreetService_GreetWithErrorHandling_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetManyTimes",
			Handler:       _GreetService_GreetManyTimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LonGreet",
			Handler:       _GreetService_LonGreet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GreetEveryone",
			Handler:       _GreetService_GreetEveryone_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greet.proto",
}

func init() { proto.RegisterFile("greet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x4f, 0xea, 0x40,
	0x14, 0xc5, 0x5f, 0xdf, 0x0b, 0xbc, 0xf6, 0xf2, 0xfe, 0xc8, 0x15, 0x11, 0x0b, 0x28, 0x69, 0x34,
	0x92, 0x90, 0x20, 0x01, 0x17, 0x26, 0x2e, 0x8c, 0x0a, 0xe2, 0x02, 0x8d, 0xa2, 0x89, 0xc6, 0x8d,
	0x29, 0x3a, 0xd6, 0x26, 0x30, 0xc5, 0x69, 0x21, 0xe1, 0x53, 0xfb, 0x15, 0x4c, 0x87, 0x29, 0x94,
	0x52, 0x6c, 0xd2, 0x1d, 0x33, 0xf7, 0xdc, 0xf3, 0xbb, 0xcc, 0x9c, 0x29, 0xa4, 0x0c, 0x46, 0x88,
	0x53, 0x1d, 0x32, 0xcb, 0xb1, 0x30, 0xc1, 0x17, 0xda, 0x05, 0xc8, 0x6d, 0xf7, 0x87, 0x49, 0x0d,
	0x2c, 0x02, 0xbc, 0x99, 0xcc, 0x76, 0x9e, 0xa9, 0x3e, 0x20, 0x39, 0xa9, 0x24, 0x95, 0x95, 0xae,
	0xc2, 0x77, 0xae, 0xf5, 0x01, 0xc1, 0x3c, 0x28, 0x7d, 0xdd, 0xab, 0xfe, 0xe4, 0x55, 0xd9, 0xdd,
	0x70, 0x8b, 0xda, 0x31, 0xfc, 0xe1, 0x3e, 0x5d, 0xf2, 0x31, 0x22, 0xb6, 0x83, 0x15, 0x90, 0x0d,
	0xe1, 0xcb, 0x9d, 0x52, 0xf5, 0xff, 0xd5, 0x29, 0xde, 0xc3, 0x75, 0x67, 0x02, 0x6d, 0x1f, 0xfe,
	0x8a, 0x66, 0x7b, 0x68, 0x51, 0x9b, 0x60, 0x16, 0x92, 0x8c, 0xd8, 0xa3, 0xbe, 0x23, 0xa6, 0x10,
	0x2b, 0xad, 0x09, 0x1b, 0x5c, 0x78, 0xa5, 0xd3, 0xc9, 0xbd, 0x39, 0x20, 0x76, 0x2c, 0x5c, 0x0d,
	0xb2, 0x41, 0x97, 0x08, 0xee, 0x09, 0xac, 0x75, 0x2c, 0x6a, 0xc4, 0xff, 0x87, 0x15, 0x48, 0xfb,
	0x0c, 0x22, 0x68, 0xe7, 0x90, 0xe1, 0xc2, 0xd6, 0x98, 0xb0, 0x89, 0x45, 0x49, 0x2c, 0xe2, 0x81,
	0x38, 0xaa, 0xb9, 0x49, 0x04, 0xb5, 0x0d, 0x39, 0xde, 0xf0, 0x60, 0x3a, 0xef, 0x4d, 0xa2, 0xbf,
	0xf6, 0xcd, 0x98, 0xe4, 0x06, 0x6c, 0x85, 0x18, 0x45, 0xd0, 0x3b, 0x50, 0x9c, 0x35, 0xb5, 0x18,
	0xb3, 0xd8, 0xa5, 0x4e, 0xdd, 0x4e, 0x23, 0xd6, 0x08, 0x47, 0xb0, 0xbd, 0xca, 0xed, 0xfb, 0x39,
	0xea, 0x9f, 0xbf, 0x44, 0x90, 0xef, 0x08, 0x1b, 0x9b, 0x2f, 0x04, 0x0f, 0x21, 0xc1, 0xd7, 0xb8,
	0xee, 0xc7, 0x89, 0xa9, 0xd4, 0xcc, 0xe2, 0xe6, 0xd4, 0x5c, 0xfb, 0x81, 0xb7, 0xf0, 0x6f, 0x31,
	0x62, 0x58, 0xf0, 0x2b, 0x83, 0xf9, 0x55, 0x8b, 0x2b, 0xaa, 0x9e, 0x61, 0x4d, 0xc2, 0x53, 0x90,
	0x3b, 0x16, 0x9d, 0xce, 0xb2, 0x29, 0xe4, 0xc1, 0x50, 0xaa, 0xb9, 0xe5, 0x82, 0x67, 0x51, 0x96,
	0xf0, 0x46, 0xbc, 0x33, 0x2f, 0x13, 0x98, 0xf7, 0x63, 0x03, 0x71, 0x53, 0x0b, 0xe1, 0xc5, 0xb9,
	0x5f, 0x4d, 0xc2, 0x47, 0x48, 0x2f, 0xdd, 0x35, 0xee, 0xf8, 0x1b, 0x43, 0xe2, 0xa4, 0x96, 0x56,
	0x0b, 0x66, 0x27, 0x68, 0x88, 0x47, 0xba, 0x74, 0x85, 0xb8, 0x1b, 0xec, 0x0e, 0xcb, 0x8b, 0xba,
	0x17, 0xa1, 0xf2, 0x40, 0x67, 0xca, 0xd3, 0x6f, 0xae, 0x1c, 0xf6, 0x7a, 0x49, 0xfe, 0x69, 0x6c,
	0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0x77, 0x0b, 0x2a, 0xbe, 0x29, 0x05, 0x00, 0x00,
}
